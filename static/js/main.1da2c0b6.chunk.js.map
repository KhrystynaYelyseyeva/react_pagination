{"version":3,"sources":["components/Pagination/Pagination.js","App.js","index.js"],"names":["Pagination","onClick","page","total","className","role","aria-label","type","data-name","middleBtn","btns","map","btn","classNames","key","renderPaginationBtn","App","state","perPage","handleChange","btnType","target","getAttribute","isNaN","updatePage","Number","number","setState","this","PureComponent","ReactDOM","render","document","getElementById"],"mappings":"iOAwDaA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,MAAlB,OACxB,yBACEC,UAAU,yBACVC,KAAK,aACLC,aAAW,cAEVJ,EAAO,GAEN,4BACEE,UAAU,sBACVG,KAAK,SACLN,QAASA,EACTO,YAAU,QAET,MAlEmB,SAACP,EAASC,EAAMC,GAC1C,IAAMM,EAAY,WAGdC,EAAO,GAcX,OAZIR,EAAOC,EAAQ,GAAKD,EAAO,IAC7BQ,EAAI,CAAI,EAAGD,GAAP,OALU,CAACP,EAAO,EAAGA,EAAMA,EAAO,GAKlC,CAA8BO,EAAWN,KAG3CD,GAAQC,EAAQ,IAClBO,EAAO,CAACP,EAAQ,EAAGA,EAAQ,EAAGA,IAG5BD,GAAQ,IACVQ,EAAO,CAAC,EAAG,EAAG,IAId,wBAAIN,UAAU,mBACXM,EAAKC,KAAI,SAACC,GACT,MAAY,aAARA,EAEA,4BACE,0BAAMR,UAAU,uBAAhB,WAQJ,4BACE,4BACEA,UACES,IAAW,kBAAmB,CAAE,aAAcD,IAAQV,IAExDK,KAAK,SACLO,IAAKF,EACLX,QAASA,EACTO,YAAWI,GAEVA,QA2BVG,CAAoBd,EAASC,EAAMC,GACnCD,EAAOC,EAAQ,GAEd,4BACEC,UAAU,kBACVG,KAAK,SACLN,QAASA,EACTO,YAAU,QAET,QC/BMQ,G,kNA9CbC,MAAQ,CACNf,KAAM,EACNC,MAAO,GACPe,QAAS,G,EAGXC,aAAe,YAAiB,IACxBC,EADuB,EAAbC,OACOC,aAAa,aAC5BpB,EAAS,EAAKe,MAAdf,KAGR,GAAKqB,MAAMH,GAGT,OAAQA,GACN,IAAK,OACH,EAAKI,WAAWtB,EAAO,GACvB,MACF,IAAK,OACH,EAAKsB,WAAWtB,EAAO,QAP3B,EAAKsB,WAAWC,OAAOL,K,EAc3BI,WAAa,SAACE,GACZ,EAAKC,SAAS,CACZzB,KAAMwB,K,uDAIA,IAAD,EAC0BE,KAAKX,MAA9Bf,EADD,EACCA,KAAMC,EADP,EACOA,MAAOe,EADd,EACcA,QAErB,OACE,kBAAC,EAAD,CACEf,MAAOA,EACPD,KAAMA,EACNgB,QAASA,EACTjB,QAAS2B,KAAKT,mB,GAzCJU,kBCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1da2c0b6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\n\nconst renderPaginationBtn = (onClick, page, total) => {\n  const middleBtn = '&hellip;';\n  const gapBtns = [page - 1, page, page + 1];\n\n  let btns = [];\n\n  if (page < total - 2 && page > 3) {\n    btns = [1, middleBtn, ...gapBtns, middleBtn, total];\n  }\n\n  if (page >= total - 2) {\n    btns = [total - 2, total - 1, total];\n  }\n\n  if (page <= 3) {\n    btns = [1, 2, 3];\n  }\n\n  return (\n    <ul className=\"pagination-list\">\n      {btns.map((btn) => {\n        if (btn === '&hellip;') {\n          return (\n            <li>\n              <span className=\"pagination-ellipsis\">\n                &hellip;\n              </span>\n            </li>\n          );\n        }\n\n        return (\n          <li>\n            <button\n              className={\n                classNames('pagination-link', { 'is-current': btn === page })\n              }\n              type=\"button\"\n              key={btn}\n              onClick={onClick}\n              data-name={btn}\n            >\n              {btn}\n            </button>\n          </li>\n        );\n      })\n      }\n    </ul>\n  );\n};\n\nexport const Pagination = ({ onClick, page, total }) => (\n  <nav\n    className=\"pagination is-centered\"\n    role=\"navigation\"\n    aria-label=\"pagination\"\n  >\n    {page > 3\n    && (\n      <button\n        className=\"pagination-previous\"\n        type=\"button\"\n        onClick={onClick}\n        data-name=\"prev\"\n      >\n        {'<<'}\n      </button>\n    )}\n    {renderPaginationBtn(onClick, page, total)}\n    {page < total - 2\n    && (\n      <button\n        className=\"pagination-next\"\n        type=\"button\"\n        onClick={onClick}\n        data-name=\"next\"\n      >\n        {'>>'}\n      </button>\n    )}\n  </nav>\n);\n\nPagination.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n};\n","import React, { PureComponent } from 'react';\nimport { Pagination } from './components/Pagination/Pagination';\nimport './App.css';\n\nclass App extends PureComponent {\n  state = {\n    page: 1,\n    total: 42,\n    perPage: 5,\n  }\n\n  handleChange = ({ target }) => {\n    const btnType = target.getAttribute('data-name');\n    const { page } = this.state;\n\n    // eslint-disable-next-line no-restricted-globals\n    if (!isNaN(btnType)) {\n      this.updatePage(Number(btnType));\n    } else {\n      switch (btnType) {\n        case 'next':\n          this.updatePage(page + 1);\n          break;\n        case 'prev':\n          this.updatePage(page - 1);\n          break;\n        default: break;\n      }\n    }\n  }\n\n  updatePage = (number) => {\n    this.setState({\n      page: number,\n    });\n  }\n\n  render() {\n    const { page, total, perPage } = this.state;\n\n    return (\n      <Pagination\n        total={total}\n        page={page}\n        perPage={perPage}\n        onClick={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}